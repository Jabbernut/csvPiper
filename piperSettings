#!/bin/bash

# This script works in 4 steps.
# 	Step 1: Read the old settings to value array.
#	Step 2: Read and validate the settings given by input arguments.
#	Step 3: Write the settings file to the correct directory.
#	Step 4: Compile the cpp file of every tool to target directory. The directory with every executable binary file. /usr/bin if you are on linux.

if [ `expr "$@" : '--help'` -lt 0 ];	#has the help flag been used?
then
	cat helpPiperSettings.txt;	#A text file that should contain the help message. We might want to implement word wrap.
	exit;
fi

char='^("\")?.$';
str='^.+$';
uint='^[1-9][0-9]*$';

cdel=0;
lsep=1;
esc=2;
bsiz=3;

value=(',' '\n' '"' 500);	#initial values are default values.
macroName=('CELLDELIM' 'LINESEP' "ESCCHR" 'BSIZ');
valContainer=("'" '"' "'" '');
pats=($char $str $char $str $uint);
let loopMax=${#macroName[@]};

toolSrc='.';		#This should be /usr/opt on linux. Idk what it should be on Windows. For now this should be a test enviroment location.
toolDest='.';		#This is where this file should be located. It is /usr/bin on linux. This will probably need a executable permission.
filename='settings.h';

echo "(1/4)" Finding settings file.;
if [ -s $toolSrc/$filename ] && [ `expr "$@" : '--default'` -eq 0 ];	#Is there a file called settings.h and do I want to read it?
then
	file=`cat $filename`;
	for argI in {0..$loopMax};
	do
		macro=${macroName[$argI]};
		container=${valContainer[$argI]};

		fileI=0;

		until [[ ${file:$fileI:${#macro}} = $macro ]];	#Jump to start of macro name
		do
			let fileI=$fileI+1;
		done

		let fileI=$fileI+${#macro}+${#container}+1;
		slice=${file:$fileI};
		
		sliceI=0;

		until [ "${slice:$sliceI:7}" = '#define' ] || [ "$sliceI" -eq ${#slice} ];
		do
			let sliceI=$sliceI+1;
		done

		let valLen=$sliceI-${#container};	#value if '[ ! "${slice:$sliceI:7}" = "#define" ]'
		if [[ ${slice:$sliceI:7} = '#define' ]];	#case if sliceI found the next macro definition
		then
			#note the actual expression should be 'let valLen=$sliceI-${#container}-1'. This is a simplification
			let valLen=$valLen-1;
		fi

		value[$argI]=${slice:0:$valLen};
	done
fi


echo "(2/4)" Reading and validating input.;
prefixList=('cell_delimeter=' 'line_separator=' 'escape_char=' 'locale=' 'buffer_size=');
defined=(0 0 0 0 0);

for input in "$@";
do
	for i in {0..$loopMax};
	do
		prefix=${prefixList[$i]};

		if [ ${input:0:${#prefix}} = $prefix ];
		then
			if [ ${defined[$i]} -eq 1 ];
			then
				echo ERROR: A parameter can only be defined once. "'$prefix'" is defined at least twice. Settings will not be saved.;
				exit;
			elif [[ ! ${value[$i]} =~ ${pats[$i]} ]];
			then
				echo ERROR: Argument $input is incorrectly defined. Settings will not be saved.;
				exit;
			fi

			defined[$i]=1;
			value[$i]=${input:${#prefix}};
		fi
	done
done
if [[ ${value[$cdel]} = ${value[$esc]} ]];
then
	echo 'ERROR: The cell delimeter and the escape character must be distinct from each other. Settings will not be saved.';
	exit;
elif [[ ! `expr index ${value[$lsep]} ${value[$cdel]}${value[$esc]}` -eq 0 ]];
then
	echo 'ERROR: The line separator cannot contain a cell delimeter or escape character. Settings will not be saved.';
	exit;
fi

echo "(3/4)" Writing settings.;
rm $filename;
for i in {0..$loopMax};
do
	echo "#define ${macroName[$i]} ${valContainer[$i]}${value[$i]}${valContainer[$i]}" | tee -a $filename;
done

echo "(4/4)" Compiling tool suite.;
toolNames=('conform' 'convert' 'select' 'project');	#contains the names of all currently planned tools minus their file type suffix (.cpp).
for name in ${toolNames[@]};
do
	#the tools shall preferably be compiled with maximum optimization
	g++ -O3 $toolSrc/$name.cpp -o $toolDest/$name
done
